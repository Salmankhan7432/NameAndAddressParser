# -*- coding: utf-8 -*-

"""

Created on Tue Apr 19 00:52:53 2022

@author: onais

"""

IMPORT re

from tqdm IMPORT tqdm

IMPORT pandas as pd

IMPORT json 

#Parsing 1st program

Address_4CAF50=open("Merged_name_address.txt","r")

SET Lines TO Address_4CAF50.readlines()

DF=[]

ii=0

SET count TO 0

FinalList=[]

SET fileHandle TO open('USAddressWordTable.txt', 'r',encoding="utf8")

SET NamefileHandle TO open('NamesWordTableOpt.txt', 'r')

SET SplitWordTable TO open('SplitWordTable.txt', 'r')



# Strips the newline character

Count=len(Lines)

DF=pd.DataFrame()

C=1

CC=1

JsonData={}

AllAddress_Key_Value_As_MASK_Comp={}

Observation=0

Total=0

dataFinal={}



FOR line IN Lines:

    line=line.strip("\n").split("|")

    ID=line[0]

    line=line[1] .strip() 

    Old_Address=line.strip()

    USAD_Conversion_Dict={"1":"USAD_SNO","2":"USAD_SPR","3":"USAD_SNM","4":"USAD_SFX","5":"USAD_SPT","6":"USAD_ANM","7":"USAD_ANO","8":"USAD_CTY","9":"USAD_STA","10":"USAD_ZIP","11":"USAD_ZP4","12":"USAD_BNM","13":"USAD_BNO","14":"USAD_RNM"}

    USAD_Conversion_Dict_Detail={"1":"USAD_SNO Street Number","2":"USAD_SPR Street Pre-directional","3":"USAD_SNM Street Name","4":"USAD_SFX Street Suffix","5":"USAD_SPT Street Post-directional","6":"USAD_ANM Secondary Address Name","7":"USAD_ANO Secondary Address Number","8":"USAD_CTY City Name","9":"USAD_STA State Name","10":"USAD_ZIP Zip Code","11":"USAD_ZP4 Zip 4 Code","12":"USAD_BNM Box Name","13":"USAD_BNO Box Number","14":"USAD_RNM Route Name"}

    List=USAD_Conversion_Dict.keys()

    FirstPhaseList=[]

    Address=re.sub(',',' , ',line)

    Address=re.sub(' +', ' ',Address)

    Address=re.sub('[.]','',Address)

    #Address=re.sub('#','',Address)    

    Address=Address.upper()

    SET AddressList TO re.split("\s|\s,\s ", Address)

    tmp1=0

    NameList=[]

    RevisedAddressList=[]

    SplitMask=""

    FOR A IN AddressList:

        FirstPhaseDict={}

        NResult=False

        TRY:

            Compare=A[0].isdigit()

        EXCEPT:

            a=0

        IF A==",":

            SplitMask+=","

        ELSEIF Compare:

            SplitMask+="A"

        ELSE:

            NR=True

            FOR line IN SplitWordTable:

            

                fields=line.split('|')

                IF A==(fields[0]):

                    SplitMask+=fields[1].strip()

                    NR=False

                    break

            IF NR:

                SplitMask+="W"

        SplitWordTable.seek(0)

    Name=""

    indexSplit=0

    FOR m IN range(len(SplitMask)):

        IF SplitMask[m] IN ("W","P",",") :

            continue

        ELSE:

            indexSplit=m

            break 

    SET RevisedAddressList TO AddressList[indexSplit:len(AddressList)]

    SET NameList TO AddressList[0:indexSplit]



    

    

    

    #del(AddressList[len(AddressList)-1])

    TrackKey=[]

    Mask=[]

    Combine=""

    LoopCheck=1

    FOR A IN RevisedAddressList:

        FirstPhaseDict={}

        NResult=False

        TRY:

            Compare=A[0].isdigit()

        EXCEPT:

            a=0

        IF A==",":

            O=0

            Mask.append(Combine)

            Combine=""

            FirstPhaseList.append(",")

            #FirstPhaseList.append("Seperator")

        ELSEIF Compare:

            Combine+="N"

            TrackKey.append("N")

            FirstPhaseDict["N"]=A

            FirstPhaseList.append(FirstPhaseDict)

        ELSE:

            FOR line IN fileHandle:

                fields=line.split('|')

                IF A==(fields[0]):

                    NResult=True

                    temp=fields[1]

                    Combine+=temp[0]

                    SET FirstPhaseDict[temp[0]] TO A

                    FirstPhaseList.append(FirstPhaseDict)

                    TrackKey.append(temp[0])

            IF NResult==False:

                Combine+="W"

                TrackKey.append("W")

                SET FirstPhaseDict["W"] TO A

                FirstPhaseList.append(FirstPhaseDict)

        IF LoopCheck==len(RevisedAddressList):

            Mask.append(Combine)

        fileHandle.seek(0)

        LoopCheck+=1    

    FirstPhaseListAddress=FirstPhaseList

    Mask_1=",".join(Mask)

    USAD_Mapping={"USAD_SNO":[],"USAD_SPR":[],"USAD_SPR":[],"USAD_SNM":[],"USAD_SFX":[],"USAD_SPT":[],"USAD_ANM":[],"USAD_ANO":[],"USAD_CTY":[],"USAD_STA":[],"USAD_ZIP":[],"USAD_ZP4":[],"USAD_BNM":[],"USAD_BNO":[],"USAD_RNM":[]}

    Start=0

    Counts=0

    FirstPhase_WithComma=FirstPhaseList

    SET FirstPhaseList TO [FirstPhaseList[b] FOR b IN range(len(FirstPhaseList)) IF FirstPhaseList[b] != ","]

    data={}

    with open('JSONMAPPING-DummyFile.json', 'r+', encoding='utf-8') as f:

        SET data TO json.load(f)

    Found=False

    FoundDict={}

    FOR tk,tv IN data.items():

        if(tk==Mask_1):

            FoundDict[tk]=tv

            Found=True

            break

    FoundExcept=False

    with open('ExceptionFile.json', 'r+', encoding='utf-8') as g:

        SET Stat TO json.load(g)

        IF Mask_1 IN Stat.keys():

            FoundExcept=True

    FirstPhaseList=[]

    NameTrackKey=[]

    Mask=[]

    Combine=""

    LoopCheck=1

    FOR A IN NameList:

        FirstPhaseDict={}

        NResult=False

        IF A==",":

            O=0

            Mask.append(Combine)

            Combine=""

            FirstPhaseList.append(",")

            #FirstPhaseList.append("Seperator")

        ELSEIF A==" ":

            continue

        ELSEIF A!="," and len(A)==1:

            Combine+="I"

            TrackKey.append("I")

            SET FirstPhaseDict["I"] TO A

            FirstPhaseList.append(FirstPhaseDict)

        ELSE:

            FOR line IN NamefileHandle:

                fields=line.split('|')

                IF A==(fields[0]):

                    NResult=True

                    temp=fields[1]

                    Combine+=temp[0]

                    SET FirstPhaseDict[temp[0]] TO A

                    FirstPhaseList.append(FirstPhaseDict)

                    TrackKey.append(temp[0])

                    break

            IF NResult==False:

                Combine+="W"

                TrackKey.append("W")

                SET FirstPhaseDict["W"] TO A

                FirstPhaseList.append(FirstPhaseDict)

        IF LoopCheck==len(NameList):

            Mask.append(Combine)

        NamefileHandle.seek(0)

        LoopCheck+=1



    FirstPhaseListName=FirstPhaseList

    NameMask_1=",".join(Mask)

    Names_Conversion_Mapping={"Prefix Title":[],"Given Name":[], "Surname":[],"Generational Suffix":[],"Suffix Title":[]}

    Start=0

    Counts=0

    FirstPhase_WithComma=FirstPhaseListName

    SET FirstPhaseListName TO [FirstPhaseListName[b] FOR b IN range(len(FirstPhaseListName)) IF FirstPhaseListName[b] != ","]

    data={}

    with open('JSONMappingNameDefault.json', 'r+', encoding='utf-8') as f:

        SET data TO json.load(f)

    FoundName=False

    NameFoundDict={}

    FOR tk,tv IN data.items():

        if(tk==NameMask_1):

            NameFoundDict[tk]=tv

            FoundName=True

            break

    FoundExceptname=False

    with open('NameExceptionFile.json', 'r+', encoding='utf-8') as g:

        SET Stat TO json.load(g)

        IF NameMask_1 IN Stat.keys():

            FoundExceptname=True

    

    

   

   

    

    SET FirstPhaseListAddress TO [FirstPhaseListAddress[b] FOR b IN range(len(FirstPhaseListAddress)) IF FirstPhaseListAddress[b] != ","]

    IF Found and FoundName:

        Observation+=1

        AllAddress_Key_Value_As_MASK_Comp={}

        Mappings={"Name":{},"Address":{}}

        FOR K2,V2 IN FoundDict[Mask_1].items():

            Temp=""

            FOR p IN V2:

                

                FOR K3,V3 IN FirstPhaseListAddress[p-1].items():

                   Temp+=" "+V3

                   Temp=Temp.strip()

                   Mappings["Address"][K2]=Temp

        AllAddress_Key_Value_As_MASK_Comp={}

        FOR K2,V2 IN NameFoundDict[NameMask_1].items():

            Temp=""

            FOR p IN V2:

                FOR K3,V3 IN FirstPhaseListName[p-1].items():

                   Temp+=" "+V3

                   Temp=Temp.strip()

                   Mappings["Name"][K2]=Temp

        CombinedMask=Mask_1+","+NameMask_1

      

        TRY:

            dataFinal[CombinedMask][ID] =Mappings

        EXCEPT:

            dataFinal[CombinedMask]={}

            dataFinal[CombinedMask][ID]=Mappings

    ELSEIF not FoundExcept:  

        with open('ExceptionFile.json', 'r+', encoding='utf-8') as g:

            SET Stat TO json.load(g)

            Stat[Mask_1]=FirstPhaseListAddress

            g.seek(0)

            json.dump(Stat,g,indent=4)

            g.truncate

    ELSEIF not FoundExceptname:  

        with open('NameExceptionFile.json', 'r+', encoding='utf-8') as g:

            SET Stat TO json.load(g)

            Stat[NameMask_1]=FirstPhaseListName

            g.seek(0)

            json.dump(Stat,g,indent=4)

            g.truncate

    

    Total+=1

        

    

SET FinalOutput TO json.dumps(dataFinal, indent=4)

 

# Writing to sample.json

with open("NameAndAddress_Output.json", "w") as outfile:

    outfile.write(FinalOutput)    

    

# OUTPUT("Address Matching Report")

# OUTPUT("Total=",Count)

# OUTPUT("Matched Addresses=",Observation)

# OUTPUT("Percentage of Matched",(Observation/Count)*100)

        # OUTPUT("Mask Generated is ",Mask_1)

    # OUTPUT("Index\tMaskToken\t\tAddress Token")

    # i=1

    # FOR k IN FirstPhaseList:

    #     FOR key,value IN k.items():

    #         OUTPUT(i,"\t\t",key,"\t\t\t\t",value) 

    #     i+=1
